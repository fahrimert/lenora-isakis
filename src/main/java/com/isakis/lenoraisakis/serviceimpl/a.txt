package com.isakis.lenoraisakis.repository;

import com.isakis.lenoraisakis.model.IsAkisAdim;
import com.isakis.lenoraisakis.model.IsAkisTransfer;
import jakarta.transaction.Transactional;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface İsAkisTransferRepository extends JpaRepository<IsAkisTransfer,String> {
    @Query  (value = "SELECT * FROM is_akis_transfer ORDER BY sıra DESC LIMIT 1", nativeQuery = true)
    Optional<IsAkisTransfer> getMaxSiraİsAkisTransfer();

    @Query  (value =
            """
 SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
 FROM is_akis_transfer t
 LEFT JOIN is_akis_adim a1 ON t.KAYNAK_ADIM_OID = a1.oid
 LEFT JOIN is_akis_adim a2 ON t.HEDEF_ADIM_OID  = a2.oid
 WHERE a1.oid = :oid
   AND a2.oid = :oid1
 """
            , nativeQuery = true)
    boolean existBySourceAndTargetId(String oid, String oid1);

    @Query(value = """
    SELECT *
    FROM is_akis_transfer
    WHERE isakis_adim_no = :adimNoGeri
      AND sonraki_isakis_adim_no = :adimNoReferans
    """, nativeQuery = true)
    IsAkisTransfer findByKaynakOidAndReferansNo(@Param("adimNoGeri")  Integer adimNoGeri,

                                                @Param("adimNoReferans")  Integer adimNoReferans);

    @Query(value = """
    SELECT *
    FROM is_akis_transfer
    WHERE kaynak_oid = :kaynakAdimOid
    """, nativeQuery = true)
    List<IsAkisTransfer> findAllByKaynakOid(@Param("kaynakAdimOid")  String kaynakAdimOid);


    @Modifying
    @Transactional
    @Query(value = """
DELETE FROM is_akis_transfer
WHERE is_akis_tanim_oid = :isAkisTanimOid
    """, nativeQuery = true)
    void deleteAllByIsAkisTanimOid(@Param("isAkisTanimOid") String isAkisTanimOid);

    IsAkisTransfer findBySıra(int i);

    @Modifying
    @Transactional
    @Query(value = """
    DELETE FROM is_akis_transfer
    WHERE kaynak_adim_oid = :adimOid
       OR hedef_adim_oid = :adimOid
    """, nativeQuery = true)
    void deleteAllByKaynakAdimOidOrHedefAdimOid(@Param("adimOid") String adimOid);
    @Modifying
    @Transactional
    @Query(value = """
    DELETE FROM is_akis_transfer
    WHERE kaynak_adim_oid = :adimOid
    """, nativeQuery = true)
    void deleteAllByIsKaynakAdimOid(String oid);

    Optional<IsAkisTransfer> findByOid(String isAkisTransferOid);



}

